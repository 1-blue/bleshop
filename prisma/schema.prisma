// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 이미지
model Photo {
  path String @id

  // 상품과 이미지 => 1:N ( 대표 이미지, 추가 이미지 )
  Product     Product? @relation(fields: [productsIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productsIdx Int?

  // 리뷰와 이미지 => 1:N
  Review    Review? @relation(fields: [reviewIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  reviewIdx Int?
}

// 유저
model User {
  idx      Int     @id @default(autoincrement())
  id       String  @unique
  password String
  name     String  @unique
  email    String  @unique
  phone    String  @unique
  isAdmin  Boolean @default(false)
  photo    String?

  // 유저와 주소 => 1:N
  addresses Address[]

  // 유저와 상품 => 1:N
  products Product[]

  // 유저와 상품 ( 장바구니 ) => N:M
  baskets Basket[]

  // 상품과 유저 ( 찜하기 ) => N:M
  wishes Wish[]

  // 유저와 주문 => 1:N
  orders Order[]

  // 유저와 리뷰 => 1:N
  reviews Review[]
}

// 주소
model Address {
  idx       Int     @id @default(autoincrement())
  address   String
  residence String
  name      String
  phone     String
  message   String
  isDefault Boolean

  // 유저와 주소 => 1 : N
  User    User? @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx Int?
}

// 상품
model Product {
  idx         Int      @id @default(autoincrement())
  name        String
  color       String?
  size        String?
  description String   @db.VarChar(2000)
  brand       String
  company     String
  period      String
  price       Int
  photo       String
  updatedAt   DateTime @updatedAt

  // 유저와 상품 => 1:N
  User    User? @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx Int?

  // 상품과 이미지 => 1:N ( 추가 이미지 )
  photos     Photo[]
  // 상품과 카테고리 => N:M
  categories ProductsOnCategories[]

  // 상품과 키워드 => N:M
  keywords ProductsOnKeywords[]

  // 상품과 필터 => N:M
  filters ProductsOnFilters[]

  // 유저와 상품 ( 장바구니 ) => N:M
  baskets Basket[]

  // 상품과 유저 ( 찜하기 ) => N:M
  wishes Wish[]

  // 상품과 주문 => N:M
  orders ProductsOnOrders[]

  // 상품과 리뷰 => 1:N
  reviews Review[]
}

// 카테고리
model Category {
  category String @id

  // 상품과 카테고리 => N:M
  products ProductsOnCategories[]
}

// 상품과 카테고리 중간 테이블 ( N:M )
model ProductsOnCategories {
  product     Product  @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx  Int
  category    Category @relation(fields: [categoryIdx], references: [category], onDelete: Cascade, onUpdate: Cascade)
  categoryIdx String

  @@id([productIdx, categoryIdx])
}

// 키워드
model Keyword {
  keyword String @id @unique

  // 상품과 키워드 => N:M
  products ProductsOnKeywords[]
}

// 상품과 키워드 중간 테이블 ( N:M )
model ProductsOnKeywords {
  product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int
  keyword    Keyword @relation(fields: [keywordIdx], references: [keyword], onDelete: Cascade, onUpdate: Cascade)
  keywordIdx String

  @@id([productIdx, keywordIdx])
}

// 필터
model Filter {
  filter String @id @unique

  // 상품과 필터 => N:M
  products ProductsOnFilters[]
}

// 상품과 필터 중간 테이블 ( N:M )
model ProductsOnFilters {
  product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int
  filter     Filter  @relation(fields: [filterIdx], references: [filter], onDelete: Cascade, onUpdate: Cascade)
  filterIdx  String

  @@id([productIdx, filterIdx])
}

// 유저와 상품 중간 테이블 (찜하기) ( N:M )
model Wish {
  size     String
  color    String
  quantity Int

  user       User    @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx    Int
  product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int

  @@id([userIdx, productIdx])
}

// 장바구니 ( 유저와 상품 )
model Basket {
  size     String
  color    String
  quantity Int
  skip     Boolean @default(false)

  user       User    @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx    Int
  product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int

  @@id([userIdx, productIdx])
}

// 주문
model Order {
  idx       Int      @id @default(autoincrement())
  name      String
  address   String
  residence String
  message   String
  amount    Int
  email     String
  phone     String
  updatedAt DateTime @updatedAt
  provider  String

  // 유저와 주문 => 1:N
  User    User @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx Int

  // 상품과 주문 => N:M
  products ProductsOnOrders[]
}

// 상품과 주문 중간 테이블 ( N:M )
model ProductsOnOrders {
  quantity Int
  size     String
  color    String
  // 리뷰 작성 유무 ( 한번의 주문에 하나의 리뷰만 가능함 )
  isReview Boolean @default(false)

  product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int
  order      Order   @relation(fields: [orderIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  orderIdx   Int

  @@id([productIdx, orderIdx])
}

// 리뷰
model Review {
  idx       Int      @id @default(autoincrement())
  score     Int
  contents  String   @db.VarChar(500)
  updatedAt DateTime @updatedAt

  // 상품과 리뷰 => 1:N
  Product    Product @relation(fields: [productIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  productIdx Int

  // 유저와 리뷰 => 1:N
  User    User @relation(fields: [userIdx], references: [idx], onDelete: Cascade, onUpdate: Cascade)
  userIdx Int

  // 리뷰과 이미지 => 1:N
  photos Photo[]
}
